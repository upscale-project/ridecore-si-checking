INPUT

OUTPUT

STATE
shamt_copy : BV(5);
simm12_copy : BV(12);
rd_copy : BV(5);
funct3_copy : BV(3);
opcode_copy : BV(7);
simm7_copy : BV(7);
funct7_copy : BV(7);
imm5_copy : BV(5);
rs1_copy : BV(5);
rs2_copy : BV(5);

rd_reg_value: BV(32);
rd_mem_reg_value: BV(32);

rs1_reg_value: BV(32);
rs2_reg_value: BV(32);

shift_offset: BV(32);
shift_immediate_offset: BV(32);
immediate: BV(32);
multiplication_result: BV(32);

load_addr: BV(32);
store_addr: BV(32);

rd_mem_copy: BV(5);

load_imm_copy : BV(32);
pc_copy: BV(32);
pc_offset: BV(32);
pc_offset_j: BV(32);
jump_immediate : BV(32) ;

INIT
shamt_copy = 0_5;
simm12_copy = 0_12;
rd_copy = 0_5;
funct3_copy = 0_3;
opcode_copy = 0_7;
simm7_copy = 0_7;
funct7_copy = 0_7;
imm5_copy = 0_5;
rs1_copy = 0_5;
rs2_copy = 0_5;

rd_reg_value = 0_32;
rd_mem_reg_value = 0_32;

immediate = 0_32;
shift_offset = 0_32;
shift_immediate_offset = 0_32;
multiplication_result = 0_32;

load_addr = 0_32;
store_addr = 0_32;
rd_mem_copy = 0_5;

pc_copy = 0_32;
pc_offset = 0_32;
pc_offset_j = 0_32;
load_imm_copy =0_32;
jump_immediate = 0_32;

INVAR
rd_reg_value  =  pipe.aregfile.regfile.mem[rd_copy];
rd_mem_reg_value  =  pipe.aregfile.regfile.mem[rd_mem_copy];

TRANS
next(shamt_copy) = (state_counter = 1_10 ? shamt : shamt_copy);
next(simm12_copy) = (state_counter = 1_10 ? simm12 : simm12_copy);
next(rd_copy) = (state_counter = 1_10 ? rd : rd_copy);
next(funct3_copy) = (state_counter = 1_10 ? funct3 : funct3_copy);
next(opcode_copy) = (state_counter = 1_10 ? opcode : opcode_copy);
next(simm7_copy) = (state_counter = 1_10 ? simm7 : simm7_copy);
next(funct7_copy) = (state_counter = 1_10 ? funct7 : funct7_copy);
next(imm5_copy) = (state_counter = 1_10 ? imm5 : imm5_copy);
next(rs1_copy) = (state_counter = 1_10 ? rs1 : rs1_copy);
next(rs2_copy) = (state_counter = 1_10 ? rs2 : rs2_copy);

next(rs1_reg_value) = (state_counter = 1_10 ? pipe.aregfile.regfile.mem[rs1] : rs1_reg_value) ;
next(rs2_reg_value) = (state_counter = 1_10 ? pipe.aregfile.regfile.mem[rs2] : rs2_reg_value) ;
next(immediate) = (state_counter = 1_10 ? simm12 SEXT 20 : immediate);
next(shift_immediate_offset) = (state_counter = 1_10 ? shamt ZEXT 27 : shift_immediate_offset) ;
next(shift_offset) = (state_counter = 1_10 ? (pipe.aregfile.regfile.mem[rs2])[0:4] ZEXT 27: shift_offset) ;
next(multiplication_result) = (state_counter = 1_10 ? ((pipe.aregfile.regfile.mem[rs1] ZEXT 32) * (pipe.aregfile.regfile.mem[rs2] ZEXT 32))[0:31]: multiplication_result) ;

#states for memory related instructions
next(store_addr) = (state_counter = 1_10 ? (pipe.aregfile.regfile.mem[rs1])+(funct7::rd SEXT 20) : store_addr) ;
next(load_addr) = (state_counter = 1_10 ? (pipe.aregfile.regfile.mem[rs1])+(simm12 SEXT 20) : load_addr) ;
next(rd_mem_copy) = (state_counter = 10_10 ? rd : rd_mem_copy);

#states for branch related instructions
next(load_imm_copy) = (state_counter = 1_10 ? simm12::rs1::funct3::0_12 : load_imm_copy);
next(jump_immediate) = (state_counter = 1_10 ? (simm12[1:11]  SEXT 20 :: 0_1) : jump_immediate) ;
next(pc_copy) = (state_counter = 1_10 ? pc : pc_copy) ;
next(pc_offset) = (state_counter = 1_10 ? funct7[6:6]::rd[0:0]::funct7[0:5]::rd[1:4]::0_1 SEXT 19: pc_offset);
next(pc_offset_j) = (state_counter = 1_10 ? simm12[11:11]::rs1::funct3::simm12[0:0]::simm12[1:10]::0_1 SEXT 11 : pc_offset_j);
